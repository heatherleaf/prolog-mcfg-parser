%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Multiple context-free grammar in Prolog-readable format
%% Autogenerated from the Grammatical Framework

%% The following predicate is defined:
%% 	 rule(Profile, Cat, c(Cat,...), [Lbl=Symbols,...])


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Language module: mcfg_FragmentSwedish

mcfg_FragmentSwedish : rule(vp( ? , 1), 'VP{}[.s2]', c('NP{}[.s]'), 
	[ ('.s2' = [arg('NP{}[.s]', 1, '.s')]) ]).
mcfg_FragmentSwedish : rule(vp, 'VP{}[.s1,.s2]', c('V{}[.s]', 'NP{}[.s]'), 
	[ ('.s1' = [arg('V{}[.s]', 1, '.s')])
	, ('.s2' = [arg('NP{}[.s]', 2, '.s')]) ]).
mcfg_FragmentSwedish : rule(vp(1,  ? ), 'VP{}[.s1]', c('V{}[.s]'), 
	[ ('.s1' = [arg('V{}[.s]', 1, '.s')]) ]).
mcfg_FragmentSwedish : rule(v_hunt, 'V{}[.s]', c, 
	[ ('.s' = [tok(jagar)]) ]).
mcfg_FragmentSwedish : rule(v_eat, 'V{}[.s]', c, 
	[ ('.s' = [tok(äter)]) ]).
mcfg_FragmentSwedish : rule(s, 'S{}[.s!Que]', c('NP{}[.s]', 'VP{}[.s1,.s2]'), 
	[ ('.s!Que' = [arg('VP{}[.s1,.s2]', 2, '.s1'), arg('NP{}[.s]', 1, '.s'), arg('VP{}[.s1,.s2]', 2, '.s2')]) ]).
mcfg_FragmentSwedish : rule(s, 'S{}[.s!Decl]', c('NP{}[.s]', 'VP{}[.s1,.s2]'), 
	[ ('.s!Decl' = [arg('NP{}[.s]', 1, '.s'), arg('VP{}[.s1,.s2]', 2, '.s1'), arg('VP{}[.s1,.s2]', 2, '.s2')]) ]).
mcfg_FragmentSwedish : rule(np1, 'NP{}[.s]', c('N{}[.s!Pl]'), 
	[ ('.s' = [arg('N{}[.s!Pl]', 1, '.s!Pl')]) ]).
mcfg_FragmentSwedish : rule(np2, 'NP{}[.s]', c('D{.n=Sg;}[.s!Utr]', 'N{.g=Utr;}[.s!Sg]'), 
	[ ('.s' = [arg('D{.n=Sg;}[.s!Utr]', 1, '.s!Utr'), arg('N{.g=Utr;}[.s!Sg]', 2, '.s!Sg')]) ]).
mcfg_FragmentSwedish : rule(np2, 'NP{}[.s]', c('D{.n=Sg;}[.s!Neu]', 'N{.g=Neu;}[.s!Sg]'), 
	[ ('.s' = [arg('D{.n=Sg;}[.s!Neu]', 1, '.s!Neu'), arg('N{.g=Neu;}[.s!Sg]', 2, '.s!Sg')]) ]).
mcfg_FragmentSwedish : rule(np2, 'NP{}[.s]', c('D{.n=Pl;}[.s!Utr]', 'N{.g=Utr;}[.s!Pl]'), 
	[ ('.s' = [arg('D{.n=Pl;}[.s!Utr]', 1, '.s!Utr'), arg('N{.g=Utr;}[.s!Pl]', 2, '.s!Pl')]) ]).
mcfg_FragmentSwedish : rule(np2, 'NP{}[.s]', c('D{.n=Pl;}[.s!Neu]', 'N{.g=Neu;}[.s!Pl]'), 
	[ ('.s' = [arg('D{.n=Pl;}[.s!Neu]', 1, '.s!Neu'), arg('N{.g=Neu;}[.s!Pl]', 2, '.s!Pl')]) ]).
mcfg_FragmentSwedish : rule(n_fish, 'N{.g=Utr;}[.s!Sg]', c, 
	[ ('.s!Sg' = [tok(fisk)]) ]).
mcfg_FragmentSwedish : rule(n_fish, 'N{.g=Utr;}[.s!Pl]', c, 
	[ ('.s!Pl' = [tok(fiskar)]) ]).
mcfg_FragmentSwedish : rule(n_lion, 'N{.g=Neu;}[.s!Sg]', c, 
	[ ('.s!Sg' = [tok(lejon)]) ]).
mcfg_FragmentSwedish : rule(n_lion, 'N{.g=Neu;}[.s!Pl]', c, 
	[ ('.s!Pl' = [tok(lejon)]) ]).
mcfg_FragmentSwedish : rule(1, 'N{}[.s!Sg]', c('N{.g=Utr;}[.s!Sg]'), 
	[ ('.s!Sg' = [arg('N{.g=Utr;}[.s!Sg]', 1, '.s!Sg')]) ]).
mcfg_FragmentSwedish : rule(1, 'N{}[.s!Sg]', c('N{.g=Neu;}[.s!Sg]'), 
	[ ('.s!Sg' = [arg('N{.g=Neu;}[.s!Sg]', 1, '.s!Sg')]) ]).
mcfg_FragmentSwedish : rule(1, 'N{}[.s!Pl]', c('N{.g=Utr;}[.s!Pl]'), 
	[ ('.s!Pl' = [arg('N{.g=Utr;}[.s!Pl]', 1, '.s!Pl')]) ]).
mcfg_FragmentSwedish : rule(1, 'N{}[.s!Pl]', c('N{.g=Neu;}[.s!Pl]'), 
	[ ('.s!Pl' = [arg('N{.g=Neu;}[.s!Pl]', 1, '.s!Pl')]) ]).
mcfg_FragmentSwedish : rule(d_one, 'D{.n=Sg;}[.s!Utr]', c, 
	[ ('.s!Utr' = [tok(en)]) ]).
mcfg_FragmentSwedish : rule(d_one, 'D{.n=Sg;}[.s!Neu]', c, 
	[ ('.s!Neu' = [tok(ett)]) ]).
mcfg_FragmentSwedish : rule(d_many, 'D{.n=Pl;}[.s!Utr]', c, 
	[ ('.s!Utr' = [tok(många)]) ]).
mcfg_FragmentSwedish : rule(d_many, 'D{.n=Pl;}[.s!Neu]', c, 
	[ ('.s!Neu' = [tok(många)]) ]).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Language module: mcfg_FragmentEnglish

mcfg_FragmentEnglish : rule(vp, 'VP{}[.s!Sg]', c('V{}[.s!Sg]', 'NP{}[.s]'), 
	[ ('.s!Sg' = [arg('V{}[.s!Sg]', 1, '.s!Sg'), arg('NP{}[.s]', 2, '.s')]) ]).
mcfg_FragmentEnglish : rule(vp, 'VP{}[.s!Pl]', c('V{}[.s!Pl]', 'NP{}[.s]'), 
	[ ('.s!Pl' = [arg('V{}[.s!Pl]', 1, '.s!Pl'), arg('NP{}[.s]', 2, '.s')]) ]).
mcfg_FragmentEnglish : rule(v_hunt, 'V{}[.s!Sg]', c, 
	[ ('.s!Sg' = [tok(hunts)]) ]).
mcfg_FragmentEnglish : rule(v_eat, 'V{}[.s!Sg]', c, 
	[ ('.s!Sg' = [tok(eats)]) ]).
mcfg_FragmentEnglish : rule(v_hunt, 'V{}[.s!Pl]', c, 
	[ ('.s!Pl' = [tok(hunt)]) ]).
mcfg_FragmentEnglish : rule(v_eat, 'V{}[.s!Pl]', c, 
	[ ('.s!Pl' = [tok(eat)]) ]).
mcfg_FragmentEnglish : rule(s, 'S{}[.s]', c('NP{.n=Sg;}[.s]', 'VP{}[.s!Sg]'), 
	[ ('.s' = [arg('NP{.n=Sg;}[.s]', 1, '.s'), arg('VP{}[.s!Sg]', 2, '.s!Sg')]) ]).
mcfg_FragmentEnglish : rule(s, 'S{}[.s]', c('NP{.n=Pl;}[.s]', 'VP{}[.s!Pl]'), 
	[ ('.s' = [arg('NP{.n=Pl;}[.s]', 1, '.s'), arg('VP{}[.s!Pl]', 2, '.s!Pl')]) ]).
mcfg_FragmentEnglish : rule(np2, 'NP{.n=Sg;}[.s]', c('D{.n=Sg;}[.s]', 'N{}[.s!Sg]'), 
	[ ('.s' = [arg('D{.n=Sg;}[.s]', 1, '.s'), arg('N{}[.s!Sg]', 2, '.s!Sg')]) ]).
mcfg_FragmentEnglish : rule(np1, 'NP{.n=Pl;}[.s]', c('N{}[.s!Pl]'), 
	[ ('.s' = [arg('N{}[.s!Pl]', 1, '.s!Pl')]) ]).
mcfg_FragmentEnglish : rule(np2, 'NP{.n=Pl;}[.s]', c('D{.n=Pl;}[.s]', 'N{}[.s!Pl]'), 
	[ ('.s' = [arg('D{.n=Pl;}[.s]', 1, '.s'), arg('N{}[.s!Pl]', 2, '.s!Pl')]) ]).
mcfg_FragmentEnglish : rule(1, 'NP{}[.s]', c('NP{.n=Sg;}[.s]'), 
	[ ('.s' = [arg('NP{.n=Sg;}[.s]', 1, '.s')]) ]).
mcfg_FragmentEnglish : rule(1, 'NP{}[.s]', c('NP{.n=Pl;}[.s]'), 
	[ ('.s' = [arg('NP{.n=Pl;}[.s]', 1, '.s')]) ]).
mcfg_FragmentEnglish : rule(n_lion, 'N{}[.s!Sg]', c, 
	[ ('.s!Sg' = [tok(lion)]) ]).
mcfg_FragmentEnglish : rule(n_fish, 'N{}[.s!Sg]', c, 
	[ ('.s!Sg' = [tok(fish)]) ]).
mcfg_FragmentEnglish : rule(n_lion, 'N{}[.s!Pl]', c, 
	[ ('.s!Pl' = [tok(lions)]) ]).
mcfg_FragmentEnglish : rule(n_fish, 'N{}[.s!Pl]', c, 
	[ ('.s!Pl' = [tok(fish)]) ]).
mcfg_FragmentEnglish : rule(d_one, 'D{.n=Sg;}[.s]', c, 
	[ ('.s' = [tok(a)]) ]).
mcfg_FragmentEnglish : rule(d_many, 'D{.n=Pl;}[.s]', c, 
	[ ('.s' = [tok(many)]) ]).

