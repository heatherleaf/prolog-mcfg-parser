%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Autogenerated multilingual MCFG grammar
%% Optimized for parsing with the Active bottomup algorithm
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Start symbols for language module: mcfg_FragmentSwedish

%% No start symbols defined

%% Start symbols for language module: mcfg_FragmentEnglish

%% No start symbols defined

%% Optimized clauses for language module: mcfg_FragmentSwedish

:- discontiguous mcfg_FragmentSwedish:eps_rule/3, mcfg_FragmentSwedish:tok_rule/5, mcfg_FragmentSwedish:cat_rule/7.

mcfg_FragmentSwedish : cat_rule('NP{}[.s]', '.s', 1, '.s2', [], [], rule(vp(?, 1), 'VP{}[.s2]', c('NP{}[.s]'))).
mcfg_FragmentSwedish : cat_rule('V{}[.s]', '.s', 1, '.s1', [], ['.s2'=[arg('NP{}[.s]', 2, '.s')]], rule(vp, 'VP{}[.s1,.s2]', c('V{}[.s]', 'NP{}[.s]'))).
mcfg_FragmentSwedish : cat_rule('V{}[.s]', '.s', 1, '.s1', [], [], rule(vp(1, ?), 'VP{}[.s1]', c('V{}[.s]'))).
mcfg_FragmentSwedish : tok_rule(jagar, '.s', [], [], rule(v_hunt, 'V{}[.s]', c)).
mcfg_FragmentSwedish : tok_rule(äter, '.s', [], [], rule(v_eat, 'V{}[.s]', c)).
mcfg_FragmentSwedish : cat_rule('VP{}[.s1,.s2]', '.s1', 2, '.s!Que', [arg('NP{}[.s]', 1, '.s'), arg('VP{}[.s1,.s2]', 2, '.s2')], [], rule(s, 'S{}[.s!Que]', c('NP{}[.s]', 'VP{}[.s1,.s2]'))).
mcfg_FragmentSwedish : cat_rule('NP{}[.s]', '.s', 1, '.s!Decl', [arg('VP{}[.s1,.s2]', 2, '.s1'), arg('VP{}[.s1,.s2]', 2, '.s2')], [], rule(s, 'S{}[.s!Decl]', c('NP{}[.s]', 'VP{}[.s1,.s2]'))).
mcfg_FragmentSwedish : cat_rule('N{}[.s!Pl]', '.s!Pl', 1, '.s', [], [], rule(np1, 'NP{}[.s]', c('N{}[.s!Pl]'))).
mcfg_FragmentSwedish : cat_rule('D{.n=Sg;}[.s!Utr]', '.s!Utr', 1, '.s', [arg('N{.g=Utr;}[.s!Sg]', 2, '.s!Sg')], [], rule(np2, 'NP{}[.s]', c('D{.n=Sg;}[.s!Utr]', 'N{.g=Utr;}[.s!Sg]'))).
mcfg_FragmentSwedish : cat_rule('D{.n=Sg;}[.s!Neu]', '.s!Neu', 1, '.s', [arg('N{.g=Neu;}[.s!Sg]', 2, '.s!Sg')], [], rule(np2, 'NP{}[.s]', c('D{.n=Sg;}[.s!Neu]', 'N{.g=Neu;}[.s!Sg]'))).
mcfg_FragmentSwedish : cat_rule('D{.n=Pl;}[.s!Utr]', '.s!Utr', 1, '.s', [arg('N{.g=Utr;}[.s!Pl]', 2, '.s!Pl')], [], rule(np2, 'NP{}[.s]', c('D{.n=Pl;}[.s!Utr]', 'N{.g=Utr;}[.s!Pl]'))).
mcfg_FragmentSwedish : cat_rule('D{.n=Pl;}[.s!Neu]', '.s!Neu', 1, '.s', [arg('N{.g=Neu;}[.s!Pl]', 2, '.s!Pl')], [], rule(np2, 'NP{}[.s]', c('D{.n=Pl;}[.s!Neu]', 'N{.g=Neu;}[.s!Pl]'))).
mcfg_FragmentSwedish : tok_rule(fisk, '.s!Sg', [], [], rule(n_fish, 'N{.g=Utr;}[.s!Sg]', c)).
mcfg_FragmentSwedish : tok_rule(fiskar, '.s!Pl', [], [], rule(n_fish, 'N{.g=Utr;}[.s!Pl]', c)).
mcfg_FragmentSwedish : tok_rule(lejon, '.s!Sg', [], [], rule(n_lion, 'N{.g=Neu;}[.s!Sg]', c)).
mcfg_FragmentSwedish : tok_rule(lejon, '.s!Pl', [], [], rule(n_lion, 'N{.g=Neu;}[.s!Pl]', c)).
mcfg_FragmentSwedish : cat_rule('N{.g=Utr;}[.s!Sg]', '.s!Sg', 1, '.s!Sg', [], [], rule(1, 'N{}[.s!Sg]', c('N{.g=Utr;}[.s!Sg]'))).
mcfg_FragmentSwedish : cat_rule('N{.g=Neu;}[.s!Sg]', '.s!Sg', 1, '.s!Sg', [], [], rule(1, 'N{}[.s!Sg]', c('N{.g=Neu;}[.s!Sg]'))).
mcfg_FragmentSwedish : cat_rule('N{.g=Utr;}[.s!Pl]', '.s!Pl', 1, '.s!Pl', [], [], rule(1, 'N{}[.s!Pl]', c('N{.g=Utr;}[.s!Pl]'))).
mcfg_FragmentSwedish : cat_rule('N{.g=Neu;}[.s!Pl]', '.s!Pl', 1, '.s!Pl', [], [], rule(1, 'N{}[.s!Pl]', c('N{.g=Neu;}[.s!Pl]'))).
mcfg_FragmentSwedish : tok_rule(en, '.s!Utr', [], [], rule(d_one, 'D{.n=Sg;}[.s!Utr]', c)).
mcfg_FragmentSwedish : tok_rule(ett, '.s!Neu', [], [], rule(d_one, 'D{.n=Sg;}[.s!Neu]', c)).
mcfg_FragmentSwedish : tok_rule(många, '.s!Utr', [], [], rule(d_many, 'D{.n=Pl;}[.s!Utr]', c)).
mcfg_FragmentSwedish : tok_rule(många, '.s!Neu', [], [], rule(d_many, 'D{.n=Pl;}[.s!Neu]', c)).
%% Optimized clauses for language module: mcfg_FragmentEnglish

:- discontiguous mcfg_FragmentEnglish:eps_rule/3, mcfg_FragmentEnglish:tok_rule/5, mcfg_FragmentEnglish:cat_rule/7.

mcfg_FragmentEnglish : cat_rule('V{}[.s!Sg]', '.s!Sg', 1, '.s!Sg', [arg('NP{}[.s]', 2, '.s')], [], rule(vp, 'VP{}[.s!Sg]', c('V{}[.s!Sg]', 'NP{}[.s]'))).
mcfg_FragmentEnglish : cat_rule('V{}[.s!Pl]', '.s!Pl', 1, '.s!Pl', [arg('NP{}[.s]', 2, '.s')], [], rule(vp, 'VP{}[.s!Pl]', c('V{}[.s!Pl]', 'NP{}[.s]'))).
mcfg_FragmentEnglish : tok_rule(hunts, '.s!Sg', [], [], rule(v_hunt, 'V{}[.s!Sg]', c)).
mcfg_FragmentEnglish : tok_rule(eats, '.s!Sg', [], [], rule(v_eat, 'V{}[.s!Sg]', c)).
mcfg_FragmentEnglish : tok_rule(hunt, '.s!Pl', [], [], rule(v_hunt, 'V{}[.s!Pl]', c)).
mcfg_FragmentEnglish : tok_rule(eat, '.s!Pl', [], [], rule(v_eat, 'V{}[.s!Pl]', c)).
mcfg_FragmentEnglish : cat_rule('NP{.n=Sg;}[.s]', '.s', 1, '.s', [arg('VP{}[.s!Sg]', 2, '.s!Sg')], [], rule(s, 'S{}[.s]', c('NP{.n=Sg;}[.s]', 'VP{}[.s!Sg]'))).
mcfg_FragmentEnglish : cat_rule('NP{.n=Pl;}[.s]', '.s', 1, '.s', [arg('VP{}[.s!Pl]', 2, '.s!Pl')], [], rule(s, 'S{}[.s]', c('NP{.n=Pl;}[.s]', 'VP{}[.s!Pl]'))).
mcfg_FragmentEnglish : cat_rule('D{.n=Sg;}[.s]', '.s', 1, '.s', [arg('N{}[.s!Sg]', 2, '.s!Sg')], [], rule(np2, 'NP{.n=Sg;}[.s]', c('D{.n=Sg;}[.s]', 'N{}[.s!Sg]'))).
mcfg_FragmentEnglish : cat_rule('N{}[.s!Pl]', '.s!Pl', 1, '.s', [], [], rule(np1, 'NP{.n=Pl;}[.s]', c('N{}[.s!Pl]'))).
mcfg_FragmentEnglish : cat_rule('D{.n=Pl;}[.s]', '.s', 1, '.s', [arg('N{}[.s!Pl]', 2, '.s!Pl')], [], rule(np2, 'NP{.n=Pl;}[.s]', c('D{.n=Pl;}[.s]', 'N{}[.s!Pl]'))).
mcfg_FragmentEnglish : cat_rule('NP{.n=Sg;}[.s]', '.s', 1, '.s', [], [], rule(1, 'NP{}[.s]', c('NP{.n=Sg;}[.s]'))).
mcfg_FragmentEnglish : cat_rule('NP{.n=Pl;}[.s]', '.s', 1, '.s', [], [], rule(1, 'NP{}[.s]', c('NP{.n=Pl;}[.s]'))).
mcfg_FragmentEnglish : tok_rule(lion, '.s!Sg', [], [], rule(n_lion, 'N{}[.s!Sg]', c)).
mcfg_FragmentEnglish : tok_rule(fish, '.s!Sg', [], [], rule(n_fish, 'N{}[.s!Sg]', c)).
mcfg_FragmentEnglish : tok_rule(lions, '.s!Pl', [], [], rule(n_lion, 'N{}[.s!Pl]', c)).
mcfg_FragmentEnglish : tok_rule(fish, '.s!Pl', [], [], rule(n_fish, 'N{}[.s!Pl]', c)).
mcfg_FragmentEnglish : tok_rule(a, '.s', [], [], rule(d_one, 'D{.n=Sg;}[.s]', c)).
mcfg_FragmentEnglish : tok_rule(many, '.s', [], [], rule(d_many, 'D{.n=Pl;}[.s]', c)).
